apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-maven
spec:
  stepTemplate:
    env:
      - name: MAVEN_MIRROR_URL
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: MAVEN_MIRROR_URL
      - name: MAVEN_TOKEN
        valueFrom:
          secretKeyRef:
            name: cd-secret
            key: MAVEN_TOKEN
      - name: MAVEN_NAME
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: MAVEN_NAME
      - name: MAVEN_RELEASE_URL
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: MAVEN_RELEASE_URL
      - name: MAVEN_SNAPSHOT_URL
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: MAVEN_SNAPSHOT_URL
      - name: MAVEN_USER_ID
        valueFrom:
          configMapKeyRef:
            name: cd-config
            key: MAVEN_USER_ID
  workspaces:
  - name: task-pvc
    mountPath: /workspace
  steps:
  - name: run-base
    image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.66
    imagePullPolicy: IfNotPresent
    env:
      - name: HOME
        value: "/root"
    workingDir: /workspace
    volumeMounts:
      - mountPath: /var/run/
        name: dind-socket
    command: ["/bin/bash", "-c"]
    args:
      - |
        ls -la .
        echo "============================================================================="
        export HOME=/root
        export SETTINGS_DIR=$HOME/.m2
        export SETTINGS_FILE=$SETTINGS_DIR/settings.xml
        mkdir -p "$SETTINGS_DIR"
        cat - >> "$SETTINGS_FILE" <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd" xmlns="http://maven.apache.org/SETTINGS/1.1.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <servers>
        EOF

        # Add all available servers
        if [ ! -z "${MAVEN_MIRROR_URL}" ]; then
        cat - >> "$SETTINGS_FILE" <<EOF
            <server>
              <username>${MAVEN_USER_ID}</username>
              <password>\${env.MAVEN_TOKEN}</password>
              <id>central</id>
            </server>
        EOF
        fi
        if [ ! -z "${MAVEN_SNAPSHOT_URL}" ]; then
        cat - >> "$SETTINGS_FILE" <<EOF
            <server>
              <username>${MAVEN_USER_ID}</username>
              <password>\${env.MAVEN_TOKEN}</password>
              <id>snapshots</id>
            </server>
        EOF
        fi
        if [ ! -z "${MAVEN_RELEASE_URL}" ]; then
        cat - >> "$SETTINGS_FILE" <<EOF
            <server>
              <username>${MAVEN_USER_ID}</username>
              <password>\${env.MAVEN_TOKEN}</password>
              <id>releases</id>
            </server>
        EOF
        fi

        cat - >> "$SETTINGS_FILE" <<EOF
          </servers>
        EOF

        cat - >> "$SETTINGS_FILE" <<EOF
            <profile>
              <id>${MAVEN_NAME}</id>
              <repositories>
        EOF

        if [ ! -z "${MAVEN_MIRROR_URL}" ]; then
        cat - >> "$SETTINGS_FILE" <<EOF
                <repository>
                  <id>central</id>
                  <url>${MAVEN_MIRROR_URL}</url>
                  <snapshots>
                    <enabled>false</enabled>
                  </snapshots>
                </repository>
        EOF
        fi
        if [ ! -z "${MAVEN_SNAPSHOT_URL}" ]; then
        cat - >> "$SETTINGS_FILE" <<EOF
                <repository>
                  <id>snapshots</id>
                  <url>${MAVEN_SNAPSHOT_URL}</url>
                  <snapshots>
                    <enabled>true</enabled>
                  </snapshots>
                  <releases>
                    <enabled>false</enabled>
                  </releases>
                </repository>
        EOF
        fi
        if [ ! -z "${MAVEN_RELEASE_URL}" ]; then
        cat - >> "$SETTINGS_FILE" <<EOF
                <repository>
                  <id>releases</id>
                  <url>${MAVEN_RELEASE_URL}</url>
                  <snapshots>
                    <enabled>false</enabled>
                  </snapshots>
                  <releases>
                    <enabled>true</enabled>
                  </releases>
                </repository>
        EOF
        fi

        cat - >> "$SETTINGS_FILE" <<EOF
              </repositories>
            <pluginRepositories>
        EOF

        if [ ! -z "${MAVEN_MIRROR_URL}" ]; then
        cat - >> "$SETTINGS_FILE" <<EOF
                <pluginRepository>
                  <id>central</id>
                  <url>${MAVEN_MIRROR_URL}</url>
                  <snapshots>
                    <enabled>false</enabled>
                  </snapshots>
                </pluginRepository>
        EOF
        fi
        if [ ! -z "${MAVEN_SNAPSHOT_URL}" ]; then
        cat - >> "$SETTINGS_FILE" <<EOF
                <pluginRepository>
                  <id>snapshots</id>
                  <url>${MAVEN_SNAPSHOT_URL}</url>
                  <snapshots>
                    <enabled>true</enabled>
                  </snapshots>
                  <releases>
                    <enabled>false</enabled>
                  </releases>
                </pluginRepository>
        EOF
        fi

        if [ ! -z "${MAVEN_RELEASE_URL}" ]; then
        cat - >> "$SETTINGS_FILE" <<EOF
                <pluginRepository>
                  <id>releases</id>
                  <url>${MAVEN_RELEASE_URL}</url>
                  <snapshots>
                    <enabled>false</enabled>
                  </snapshots>
                  <releases>
                    <enabled>true</enabled>
                  </releases>
                </pluginRepository>
        EOF
        fi

        cat - >> "$SETTINGS_FILE" <<EOF
            </pluginRepositories>
            </profile>
          </profiles>
          <activeProfiles>
            <!--make the profile active all the time -->
            <activeProfile>${MAVEN_NAME}</activeProfile>
          </activeProfiles>
        </settings>
        EOF
        cat "$SETTINGS_FILE"

        # cd chess.utils
        # echo "formulachess"
        # mvn -B clean verify
  sidecars:
    - image: icr.io/continuous-delivery/base-images/multiarch-dind:v1.15.0
      name: server
      securityContext:
        privileged: true
      command: ["sh", "-c"]
      args:
      - if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then 
          apk add e2fsprogs && 
          truncate -s 20G /tmp/disk.img && 
          mkfs.ext4 /tmp/disk.img && 
          mount /tmp/disk.img /var/lib/docker; fi &&
        dockerd-entrypoint.sh --mtu=1400 --host=unix:///var/run/docker.sock;
      volumeMounts:
        - mountPath: /var/run/
          name: dind-socket
      readinessProbe:
        initialDelaySeconds: 4
        periodSeconds: 1
        exec:
          command: ["docker", "stats", "--no-stream"]
  volumes:
    - name: dind-socket
      emptyDir: {}